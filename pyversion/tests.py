from compute.exact import Compute

import unittest
c = Compute()

class TestComputeMethods(unittest.TestCase):

	def test_divide(self):
		self.assertEqual(c.divide(1,2323), { "repeat": True, "value": "0.0004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739560912613000430477830391734825656478691347395609126130004304778303917348256564786913473956091261300043047783039173482565647869134739", "max_nonrepeat": 0, "max_repeat": 2322 })
		self.assertEqual(c.divide(1,4), { 'repeat': False, 'value': '0.25'})
		self.assertEqual(c.divide(1,3), { 'repeat': True, 'value': '0.333',  "max_nonrepeat": 0, "max_repeat": 2})
		self.assertEqual(c.divide(9,3), { 'repeat': False, 'value': '3'})
		self.assertEqual(c.divide(10,3), { 'repeat': True, 'value': '3.333', "max_nonrepeat": 0, "max_repeat": 2})
		self.assertEqual(c.divide(780,288), { 'repeat': True, "value": "2.708333333333333333333333333",  "max_nonrepeat": 3, "max_repeat": 23 })

	def test_factorial(self):
		self.assertEqual(c.factorial(0), 1)
		self.assertEqual(c.factorial(1), 1)
		self.assertEqual(c.factorial(2), 2)
		self.assertEqual(c.factorial(3), 6)
		self.assertEqual(c.factorial(4), 24)
		self.assertEqual(c.factorial(5), 120)
		self.assertEqual(c.factorial(9), 362880)

	def test_reduce_fraction(self):
		self.assertEqual(c.reduce_fraction(2, 6), {"numerator":1, "denominator":3})
		self.assertEqual(c.reduce_fraction(1, 5), {"numerator":1, "denominator":5})
		self.assertEqual(c.reduce_fraction(8, 4), {"numerator":2, "denominator":1})
		self.assertEqual(c.reduce_fraction(14, 49), {"numerator":2, "denominator":7})
		self.assertEqual(c.reduce_fraction(8, 24), {"numerator":1, "denominator":3})
	
	def test_determine_if_repeating_fraction(self):
		self.assertEqual(c.determine_if_repeating_fraction(1,3), {"is_repeating": True, "max_nonrepeat": 0, "max_repeat": 2 })
		self.assertEqual(c.determine_if_repeating_fraction(1,4), {"is_repeating": False})
		self.assertEqual(c.determine_if_repeating_fraction(780,288), {"is_repeating": True, "max_nonrepeat": 3, "max_repeat": 23 })
		self.assertEqual(c.determine_if_repeating_fraction(1,2323), {"is_repeating": True, "max_nonrepeat": 0, "max_repeat": 2322 })	
		
	def test_e(self):
		pass
		#self.assertEqual(c.e(), "2.7182818284590452353602874713526624977572470936999595749669676277")

#2 1 = 5 1
#1 2   2 6
if __name__ == '__main__':
    unittest.main()
	#value = c.divide(780,288)
	#print("Value is: "+ value['value'])
	#if(value['repeat']):
	#	print("Decimal repeats with value: "+value['repeat_value'])
	#print('\n')
